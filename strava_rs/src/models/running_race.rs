/*
 * Strava API v3
 *
 * The [Swagger Playground](https://developers.strava.com/playground) is the easiest way to familiarize yourself with the Strava API by submitting HTTP requests and observing the responses before you write any client code. It will show what a response will look like with different endpoints depending on the authorization scope you receive from your athletes. To use the Playground, go to https://www.strava.com/settings/api and change your “Authorization Callback Domain” to developers.strava.com. Please note, we only support Swagger 2.0. There is a known issue where you can only select one scope at a time. For more information, please check the section “client code” at https://developers.strava.com/docs.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RunningRace {
    /// The unique identifier of this race.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// The name of this race.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The type of this race.
    #[serde(rename = "running_race_type", skip_serializing_if = "Option::is_none")]
    pub running_race_type: Option<i32>,
    /// The race's distance, in meters.
    #[serde(rename = "distance", skip_serializing_if = "Option::is_none")]
    pub distance: Option<f32>,
    /// The time at which the race begins started in the local timezone.
    #[serde(rename = "start_date_local", skip_serializing_if = "Option::is_none")]
    pub start_date_local: Option<String>,
    /// The name of the city in which the race is taking place.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// The name of the state or geographical region in which the race is taking place.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The name of the country in which the race is taking place.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The set of routes that cover this race's course.
    #[serde(rename = "route_ids", skip_serializing_if = "Option::is_none")]
    pub route_ids: Option<Vec<i64>>,
    /// The unit system in which the race should be displayed.
    #[serde(rename = "measurement_preference", skip_serializing_if = "Option::is_none")]
    pub measurement_preference: Option<MeasurementPreference>,
    /// The vanity URL of this race on Strava.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The URL of this race's website.
    #[serde(rename = "website_url", skip_serializing_if = "Option::is_none")]
    pub website_url: Option<String>,
}

impl RunningRace {
    pub fn new() -> RunningRace {
        RunningRace {
            id: None,
            name: None,
            running_race_type: None,
            distance: None,
            start_date_local: None,
            city: None,
            state: None,
            country: None,
            route_ids: None,
            measurement_preference: None,
            url: None,
            website_url: None,
        }
    }
}

/// The unit system in which the race should be displayed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MeasurementPreference {
    #[serde(rename = "feet")]
    Feet,
    #[serde(rename = "meters")]
    Meters,
}

